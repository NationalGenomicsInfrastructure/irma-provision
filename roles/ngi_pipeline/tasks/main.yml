---

- name: fetch ngi_pipline from github 
  git: repo={{ ngi_pipeline_repo }} 
       dest={{ ngi_pipeline_dest }}
       version={{ ngi_pipeline_version }}
       force=yes
  tags: ngi_pipeline 


- name: check if ngi virtual env exists 
  shell: conda env list | awk '{print $1}' | egrep -e "^NGI$"
  register: ngi_venv_exists
  ignore_errors: true
  tags: ngi_pipeline

- name: setup virtual env and install dependencies 
  shell: conda create -n NGI pip sqlalchemy 
  when: not ngi_venv_exists.stdout 
  tags: ngi_pipeline

- name: install ngi_pipeline reqs
  shell: /lupus/ngi//sw/anaconda/envs/NGI/bin/pip install -r /lupus/ngi//sw/ngi_pipeline/requirements.txt
  tags: ngi_pipeline

- name: install ngi_pipeline
  shell: cd {{ ngi_pipeline_dest }} && /lupus/ngi//sw/anaconda/envs/NGI/bin/pip install .
  tags: ngi_pipeline
 
# Set Uppsala specific variables
- set_fact:
    records_db: "{{ records_db_upps }}"
    ngi_pipeline_slurm_project: "{{ ngi_pipeline_upps_delivery }}"
    ngi_pipeline_log: "{{ ngi_pipeline_log_upps }}"
  tags: ngi_pipeline

- name: deploy irma ngi_pipeline config for uppsala 
  template: src="irma_ngi_config.yaml.j2" dest="{{ ngi_pipeline_conf }}/{{ upps_config }}"
  tags: ngi_pipeline 

# Set Stockholm specific variables
- set_fact:
    records_db: "{{ records_db_sthlm }}"
    ngi_pipeline_slurm_project: "{{ ngi_pipeline_sthlm_delivery }}"
    ngi_pipeline_log: "{{ ngi_pipeline_log_sthlm }}"
  tags: ngi_pipeline

- name: deploy irma ngi_pipeline config for stockholm
  template: src="irma_ngi_config.yaml.j2" dest="{{ ngi_pipeline_conf }}/{{ sthlm_config }}"
  tags: ngi_pipeline

- name: deploy common bash environment variables 
  template: src="{{ bash_env_script }}.j2" dest="{{ ngi_pipeline_conf }}/{{ bash_env_script }}"
  tags: ngi_pipeline  

# Set Uppsala specific variables 
- set_fact: 
    site_config: "{{ upps_config }}"
    charon_api_token: "{{ charon_api_token_upps }}"
  tags: ngi_pipeline

- name: deploy uppsala site bash environment variables 
  template: src="{{ bash_env_site_script }}" dest="{{ ngi_pipeline_conf }}/{{ bash_env_upps_script }}"
  tags: ngi_pipeline 

# Set Stockholm specific variables
- set_fact: 
    site_config: "{{ sthlm_config }}"
    charon_api_token: "{{ charon_api_token_sthlm }}"
  tags: ngi_pipeline

- name: deploy stockholm site bash environment variables
  template: src="{{ bash_env_site_script }}" dest="{{ ngi_pipeline_conf }}/{{ bash_env_sthlm_script }}"
  tags: ngi_pipeline

# TODO: Add step that sources this file in development user's local bash init files. 

- name: deploy fastqc conf for irma 
  copy: src="fastq_screen.irma.conf" dest="{{ ngi_pipeline_conf }}" 
  tags: ngi_pipeline 

- name: create ngi_pipeline log dir
  file: name={{ ngi_pipeline_logs }} state=directory
  tags: ngi_pipeline

- name: add anaconda path to sourceme script
  lineinfile: dest={{ ngi_pipeline_conf }}/{{ bash_env_script }}
              line='export PATH={{ anaconda_path }}/bin:$PATH'
              backup=yes
  tags: ngi_pipeline

