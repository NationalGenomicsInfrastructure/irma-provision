---

- name: Fetch sarek from GitHub
  git: repo="{{ sarek_repo }}"
       dest="{{ sarek_dest }}"
       version="{{ sarek_version }}"
       force=yes

- name: Create sarek containers folder and temp/cache for images
  file: name="{{ item }}" state=directory mode=g+s
  with_items:
  - "{{ sarek_containers }}"
  - "{{ sarek_containers }}/singularity_cache"
  - "{{ sarek_containers }}/singularity_temp"

- name: Pull sarek Singularity image
  command: "singularity pull --name sarek-{{ sarek_version }}.simg {{ sarek_containers_repo }}/sarek:{{ sarek_version }}"
  environment:
    SINGULARITY_CACHEDIR: "{{ sarek_containers }}/singularity_cache"
    SINGULARITY_TMPDIR: "{{ sarek_containers }}/singularity_temp"
  args:
    chdir: "{{ sarek_containers }}"
    creates: "{{ sarek_containers }}/saresarek-{{ sarek_version }}.simg"
  ignore_errors: true

- name: Pull sarekvep, sareksnpeff Singularity images
  command: "singularity pull --name {{ item.0 }}-{{ sarek_version }}.{{ item.1 }}.simg {{ sarek_containers_repo }}/{{ item.0 }}:{{ sarek_version }}.{{ item.1 }}"
  environment:
    SINGULARITY_CACHEDIR: "{{ sarek_containers }}/singularity_cache"
    SINGULARITY_TMPDIR: "{{ sarek_containers }}/singularity_temp"
  args:
    chdir: "{{ sarek_containers }}"
    creates: "{{ sarek_containers }}/{{ item.0 }}-{{ sarek_version }}.{{ item.1 }}.simg"
  with_nested:
    - "{{ sarek_genome_specific_containers }}"
    - "{{ sarek_genomes }}"
  ignore_errors: true

- name: Remove sarek containers temp directories
  file: name="{{ item }}" state=absent
  with_items:
  - "{{ sarek_containers }}/singularity_cache"
  - "{{ sarek_containers }}/singularity_temp"

- name: Deploy irma-specific sarek config
  copy:
    src: files/sarek_irma.config
    dest: "{{ sarek_irma_config }}"

- name: Create sarek wrapper function
  template:
    src: "sarek_exec_site.sh.j2"
    dest: "{{ ngi_resources }}/sarek_exec_{{ item.site }}.sh"
  with_items:
  - { site: "sthlm", project_id: "{{ ngi_pipeline_sthlm_delivery }}" }
  - { site: "upps", project_id: "{{ ngi_pipeline_upps_delivery }}" }

- name: Source sarek wrapper function
  lineinfile: dest="{{ ngi_pipeline_conf }}/{{ item.script }}"
              line="source {{ ngi_resources }}/sarek_exec_{{ item.site }}.sh"
              backup=no
  with_items:
  - { site: "sthlm", script: "{{ bash_env_sthlm_script }}" }
  - { site: "upps", script: "{{ bash_env_upps_script }}" }

- name: Store SAREK tool version in deployment
  lineinfile:
    dest: "{{ deployed_tool_versions }}"
    line: "sarek: {{ sarek_version }}"
