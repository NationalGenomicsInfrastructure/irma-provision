---
# kong demands:
# openssl sources
# openresty (comes with luajit)
# luarocks
# cassandra
# serf

# use a loop a la http://stackoverflow.com/questions/30785281/one-loop-over-multiple-ansible-tasks ? 

- name: create openssl destination directory
  file: path={{ openssl_dest }} state=directory mode=g+rwXs

- name: download openssl archive
  get_url:
    url: "{{ openssl_url }}"
    dest: "{{ openssl_dest }}/{{ openssl_file }}"

- name: unpack openssl to destination
  unarchive: 
    src: "{{ openssl_dest }}/{{ openssl_file }}" 
    dest: "{{ openssl_dest }}"
    copy: no 
    creates: "{{ openssl_dest }}/openssl-{{ openssl_version }}/LICENSE"
    mode: g+rwX,o+rX

- name: create openresty destination directory
  file: path={{ openresty_dest }} state=directory mode=g+rwXs

- name: download openresty archive
  get_url:
    url: "{{ openresty_url }}"
    dest: "{{ openresty_dest }}/{{ openresty_file }}"

- name: unpack openresty to destination
  unarchive: 
    src: "{{ openresty_dest }}/{{ openresty_file }}" 
    dest: "{{ openresty_dest }}"
    copy: no 
    creates: "{{ openresty_dest }}/{{ openresty_version }}/bin/resty"
    mode: g+rwX,o+rX

- name: configure openresty
  shell: "./configure --with-pcre-jit --with-ipv6 --with-http_realip_module --with-http_ssl_module --with-http_stub_status_module --with-http_v2_module --prefix={{ openresty_dest }}/{{ openresty_version }} --with-openssl={{ openssl_dest }}/openssl-{{ openssl_version }}/" 
  args: 
    chdir: "{{ openresty_dest }}/openresty-{{ openresty_version }}"
    creates: "{{ openresty_dest }}/{{ openresty_version }}/bin/resty"

- name: compile openresty
  shell: make install
  args: 
    chdir: "{{ openresty_dest}}/openresty-{{ openresty_version }}" 
    creates: "{{ openresty_dest }}/{{ openresty_version }}/bin/resty"

- name: create luarocks destination directory
  file: path={{ luarocks_dest }} state=directory mode=g+rwXs

- name: download luarocks archive
  get_url:
    url: "{{ luarocks_url }}"
    dest: "{{ luarocks_dest }}/{{ luarocks_file }}"

- name: unpack luarocks to destination
  unarchive: 
    src: "{{ luarocks_dest }}/{{ luarocks_file }}" 
    dest: "{{ luarocks_dest }}"
    copy: no 
    creates: "{{ luarocks_dest }}/{{ luarocks_version }}/bin/luarocks"
    mode: g+rwX,o+rX

- name: figure out luajit version/include folder name
  find:
    paths: "{{ openresty_dest }}/{{ openresty_version }}/luajit/include"
    patterns: "luajit-*"
    recurse: no
    file_type: directory
  register: luajit_include_folder

- name: make sure the include folder is unambiguous
  assert:
    that: "luajit_include_folder.matched == 1"

- name: configure luarocks
  shell: "./configure --lua-suffix=jit --with-lua={{ openresty_dest }}/{{ openresty_version }}/luajit --with-lua-include={{ luajit_include_folder.files[0].path }} --prefix={{ luarocks_dest }}/{{ luarocks_version }}"
  args: 
    chdir: "{{ luarocks_dest }}/luarocks-{{ luarocks_version }}"
    creates: "{{ luarocks_dest }}/{{ luarocks_version }}/bin/luarocks"

- name: compile luarocks 
  shell: make build && make install
  args: 
    chdir: "{{ luarocks_dest }}/luarocks-{{ luarocks_version }}"
    creates: "{{ luarocks_dest }}/{{ luarocks_version }}/bin/luarocks"

- name: create cassandra destination directory
  file: path={{ cassandra_dest }} state=directory mode=g+rwXs

- name: download cassandra archive
  get_url:
    url: "{{ cassandra_url }}"
    dest: "{{ cassandra_dest }}/{{ cassandra_file }}"

- name: unpack cassandra to destination
  unarchive: 
    src: "{{ cassandra_dest }}/{{ cassandra_file }}" 
    dest: "{{ cassandra_dest }}"
    copy: no 
    creates: "{{ cassandra_dest }}/{{ cassandra_version }}/bin/cassandra"
    mode: g+rwX,o+rX

- name: symlink cassandra to install dir
  file: src="{{ cassandra_dest }}/apache-cassandra-{{ cassandra_version }}" path="{{ cassandra_dest }}/{{ cassandra_version }}" state=link

- name: symlink the cassandra conf dir to global ngi conf dir
  file: src="{{ cassandra_dest }}/{{ cassandra_version }}/conf" path="{{ ngi_pipeline_conf }}/cassandra" state=link

- name: deploy customized cassandra main conf 
  template: src="cassandra.yaml.j2" dest="{{ ngi_pipeline_conf }}/cassandra/cassandra.yaml" 

- name: modify cassandra's environment file for proper logdir
  lineinfile: dest="{{ ngi_pipeline_conf }}/cassandra/cassandra-env.ps1"
              regexp=".logdir = ."
              line='$logdir = "{{ cassandra_log_dest }}"'
              backup=no

- name: modify cassandra's startup script for proper logdir
  replace: dest="{{ cassandra_dest }}/{{ cassandra_version }}/bin/cassandra"
              regexp=".-Dcassandra.logdir=\$CASSANDRA_HOME/logs"
              replace=" -Dcassandra.logdir={{ cassandra_log_dest }}"
              backup=no

- name: modify uppsala's supervisord conf to start cassandra
  ini_file:
    dest={{ ngi_pipeline_conf }}/supervisord_upps.conf
    section=program:cassandra
    option=command
    value="cassandra -f"
    backup=no

- name: modify uppsala's supervisord conf to autorestart cassandra
  ini_file:
    dest={{ ngi_pipeline_conf }}/supervisord_upps.conf
    section=program:cassandra
    option=autorestart
    value=true
    backup=no

- name: create serf destination directory
  file: path={{ serf_dest }} state=directory mode=g+rwXs

- name: download serf archive
  get_url:
    url: "{{ serf_url }}"
    dest: "{{ serf_dest }}/{{ serf_file }}"

- name: unpack serf to destination
  unarchive: 
    src: "{{ serf_dest }}/{{ serf_file }}" 
    dest: "{{ serf_dest }}"
    copy: no 
    creates: "{{ serf_dest }}/{{ serf_version }}/bin/serf"
    mode: g+rwX,o+rX
 
