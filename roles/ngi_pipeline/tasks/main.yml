---

- name: Fetch ngi_pipeline from github
  git: repo={{ ngi_pipeline_repo }}
       dest={{ ngi_pipeline_dest }}
       version={{ ngi_pipeline_version }}
       force=yes

- name: "Check if {{ NGI_venv_name }} virtual env exists"
  shell: "conda env list | awk '{print $1}' | egrep -e ^{{ NGI_venv_name }}$"
  register: "{{ NGI_venv_name }}_venv_exists"
  ignore_errors: true

- name: Setup virtual env and install dependencies
  shell: "conda create -n {{ NGI_venv_name }} pip"
  when: "not {{ NGI_venv_name }}_venv_exists.stdout"

- name: "Check if {{ NGI_venv_py3_name }} virtual env exists"
  shell: "conda env list | awk '{print $1}' | egrep -e ^{{ NGI_venv_py3_name }}$"
  register: "{{ NGI_venv_py3_name }}_venv_exists"
  ignore_errors: true

- name: Setup virtual env with python3 and install dependencies
  shell: "conda create -n {{ NGI_venv_py3_name }} -c anaconda python=3.8"
  when: "not {{ NGI_venv_py3_name }}_venv_exists.stdout"

- name: (Temporary until everything is updated) Install click7.0 as click7.1 breaks everything
  shell: "{{ ngi_pipeline_venv }}/bin/pip install click==7.0"

- name: Install ngi_pipeline requirements
  shell: "{{ ngi_pipeline_venv }}/bin/pip install -r {{ ngi_pipeline_dest }}/requirements.txt"

- name: Install ngi_pipeline
  shell: "cd {{ ngi_pipeline_dest }} && {{ ngi_pipeline_venv }}/bin/pip install ."

- name: Create ngi_pipeline conf directory
  file: path="{{ ngi_pipeline_conf }}" state=directory mode=g+s

- name: Create ngi_pipeline staging incoming & archive directories
  file: path="{{ proj_root }}/{{ item.site }}/{{ item.dir }}" state=directory mode=g+s
  with_items:
  - { site: "{{ ngi_pipeline_sthlm_delivery }}", dir: "incoming"}
  - { site: "{{ ngi_pipeline_upps_delivery }}", dir: "incoming"}
  - { site: "{{ ngi_pipeline_sthlm_delivery }}", dir: "archive"}
  - { site: "{{ ngi_pipeline_upps_delivery }}", dir: "archive"}
  when: deployment_environment in ["staging", "devel"]

- name: Install PyVCF for joint calling
  shell: "{{ ngi_pipeline_venv }}/bin/pip install PyVCF"

- name: Create ngi_resources folder
  file: name="{{ ngi_resources }}" state=directory mode=g+s

- name: Create ngi_resources/piper folder
  file: name="{{ ngi_resources }}/piper" state=directory mode=g+s

- name: Create deployed tools version file
  copy:
    dest: "{{ deployed_tool_versions }}"
    content: "-- {{ deployment_environment }} ({{ deployment_version }}) --"

- name: Deploy GATK license key
  copy: src="files/{{ gatk_key }}" dest="{{ ngi_resources }}/piper/{{ gatk_key }}"

# Set Uppsala specific variables
- set_fact:
    ngi_pipeline_db: "{{ ngi_pipeline_db_upps }}"
    ngi_pipeline_slurm_project: "{{ ngi_pipeline_upps_delivery }}"
    ngi_pipeline_sequencing_center: "NGI-U"
    ngi_pipeline_log: "{{ ngi_pipeline_log_upps }}"
    recipient_mail: "{{ recipient_mail_upps }}"
    site: "upps"

- name: Deploy irma ngi_pipeline config for uppsala
  template: src="irma_ngi_config.yaml.j2" dest="{{ ngi_pipeline_conf }}/{{ upps_config }}"

# Set Stockholm specific variables
- set_fact:
    ngi_pipeline_db: "{{ ngi_pipeline_db_sthlm }}"
    ngi_pipeline_slurm_project: "{{ ngi_pipeline_sthlm_delivery }}"
    ngi_pipeline_sequencing_center: "NGI-S"
    ngi_pipeline_log: "{{ ngi_pipeline_log_sthlm }}"
    recipient_mail: "{{ recipient_mail_sthlm }}"
    site: "sthlm"

- name: Deploy irma ngi_pipeline config for stockholm
  template: src="irma_ngi_config.yaml.j2" dest="{{ ngi_pipeline_conf }}/{{ sthlm_config }}"

- name: Deploy common bash environment variables
  template: src="{{ bash_env_script }}.j2" dest="{{ ngi_pipeline_conf }}/{{ bash_env_script }}"

# Set Uppsala specific variables
- set_fact:
    site_config: "{{ upps_config }}"
    charon_api_token: "{{ charon_api_token_upps }}"
    tsm_config_file: "{{ tsm_config_file_upps }}"
    site: "upps"

- name: Deploy uppsala site bash environment variables
  template: src="{{ bash_env_site_script }}" dest="{{ ngi_pipeline_conf }}/{{ bash_env_upps_script }}"

- name: Deploy uppnex_datadeliver script for Uppsala
  copy: src="files/uppnex_datadeliver" dest="{{ sw_path }}/uppnex_datadeliver" mode="u=rwx,g=rwx,o=rx"

# Set Stockholm specific variables
- set_fact:
    site_config: "{{ sthlm_config }}"
    charon_api_token: "{{ charon_api_token_sthlm }}"
    tsm_config_file: "{{ tsm_config_file_sthlm }}"
    site: "sthlm"

- name: Deploy stockholm site bash environment variables
  template: src="{{ bash_env_site_script }}" dest="{{ ngi_pipeline_conf }}/{{ bash_env_sthlm_script }}"

- name: Deploy fastqc conf for irma
  copy: src="fastq_screen.irma.conf" dest="{{ ngi_pipeline_conf }}"

- name: Deploy script for creating site specific ngi_pipeline dirs for logs and db
  template: src=create_ngi_pipeline_dirs.sh.j2 dest={{ ngi_resources }}/create_ngi_pipeline_dirs.sh

- name: Add anaconda path to sourceme script
  lineinfile: dest={{ ngi_pipeline_conf }}/{{ bash_env_script }}
              line='export PATH={{ anaconda_path }}/bin:$PATH'
              backup=no

- name: Add py3 anaconda env path to sthlm sourceme script
  lineinfile: dest={{ ngi_pipeline_conf }}/{{ bash_env_sthlm_script }}
              line='export PATH=$PATH:{{ anaconda_path }}/envs/{{ NGI_venv_py3_name }}/bin'
              backup=no

- name: Try getting anaconda version
  shell: "conda --version"
  register: conda_version
  ignore_errors: true

- name: Store anaconda version in deployment
  lineinfile:
    dest: "{{ deployed_tool_versions }}"
    line: "Anaconda: {{ conda_version.stderr }}"
  when: "'{{ conda_version.stderr }}'" #for some reason saved as stderr

- name: Store ngi_pipeline version in deployment
  lineinfile:
    dest: "{{ deployed_tool_versions }}"
    line: "NGI Pipeline: {{ ngi_pipeline_version }}"
